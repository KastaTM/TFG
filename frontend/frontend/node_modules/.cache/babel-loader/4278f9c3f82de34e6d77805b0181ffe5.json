{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Rodrigo\\\\Desktop\\\\Uni 22-23\\\\Trabajo De Fin De Grado\\\\tfgReact\\\\frontend\\\\src\\\\components\\\\adds\\\\AddDisease.jsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { useHistory, useParams } from 'react-router-dom';\nimport DiseaseService from '../../services/DiseaseService';\n\n// Componente que permite añadir enfermedades a un paciente\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AddDisease = () => {\n  _s();\n  const history = useHistory(); // Hook para la navegación de la página\n  const params = useParams(); // Hook para obtener los parámetros de la URL\n  const idDoctor = localStorage.getItem('token'); // ID del doctor autenticado\n\n  // Aqui se empiezan a definir las variables de estado\n  const [idPatient] = useState(params.id); // ID del paciente actual\n  const [diseases, setDiseases] = useState([]); // Lista de enfermedades disponibles\n\n  // Aqui se empiezan a definir las funciones del componente\n\n  // Esta función añade una enfermedad a un paciente y redirige al usuario a la página de visualización del paciente correspondiente.\n  const addDiseaseToPatient = (idDisease, diseaseName) => {\n    let diseasePatient = {\n      idDisease: idDisease,\n      idPatient: idPatient,\n      diseaseName: diseaseName\n    };\n    DiseaseService.addDiseaseToPatient(diseasePatient).then(() => {//Hacer\n    });\n    history.push({\n      pathname: `/view-patient/${idDoctor}/${idPatient}`,\n      search: 'true'\n    });\n  };\n\n  // Este hook de efecto se ejecuta cuando el componente se monta, actualiza o desmonta.\n  useEffect(() => {\n    // Se define una función que se ejecuta cuando el usuario utiliza el botón atrás en su navegador\n    window.onpopstate = () => {\n      history.push(`/view-patient/${idDoctor}/${idPatient}`);\n    };\n    // Se obtiene la lista de enfermedades disponibles del paciente actual y se almacena en la variable de estado 'diseases'\n    DiseaseService.getRestDiseasesPatient(idPatient).then(res => {\n      setDiseases(res.data);\n    });\n  }, [history, idDoctor, idPatient]);\n\n  // Renderiza la lista de enfermedades disponibles y un botón para añadir cada una a la lista del paciente\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"text-center\",\n      children: \"Lista de Enfermedades\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"row\",\n      children: /*#__PURE__*/_jsxDEV(\"table\", {\n        className: \"table table-striped table-bordered\",\n        children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n          children: /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: /*#__PURE__*/_jsxDEV(\"th\", {\n              children: \"Nombre\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 48,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 47,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n          children: diseases.map(disease => /*#__PURE__*/_jsxDEV(\"tr\", {\n            children: [/*#__PURE__*/_jsxDEV(\"td\", {\n              children: disease.diseaseName\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 56,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: disease.diseaseDescription\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 41\n            }, this), /*#__PURE__*/_jsxDEV(\"td\", {\n              children: /*#__PURE__*/_jsxDEV(\"button\", {\n                style: {\n                  marginLeft: \"10px\"\n                },\n                onClick: () => addDiseaseToPatient(disease.idDisease, disease.diseaseName),\n                className: \"btn btn-danger\",\n                children: \"A\\xF1adir\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 45\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 41\n            }, this)]\n          }, disease.idDisease, true, {\n            fileName: _jsxFileName,\n            lineNumber: 55,\n            columnNumber: 37\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 51,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 9\n  }, this);\n};\n\n// Exporta el componente utilizando React.memo para evitar la renderización innecesaria\n_s(AddDisease, \"6B3nH93pnM3OvFFGrP+/c7EYWNs=\", false, function () {\n  return [useHistory, useParams];\n});\n_c = AddDisease;\nexport default _c2 = /*#__PURE__*/React.memo(AddDisease);\nvar _c, _c2;\n$RefreshReg$(_c, \"AddDisease\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"names":["React","useEffect","useState","useHistory","useParams","DiseaseService","AddDisease","history","params","idDoctor","localStorage","getItem","idPatient","id","diseases","setDiseases","addDiseaseToPatient","idDisease","diseaseName","diseasePatient","then","push","pathname","search","window","onpopstate","getRestDiseasesPatient","res","data","map","disease","diseaseDescription","marginLeft","memo"],"sources":["C:/Users/Rodrigo/Desktop/Uni 22-23/Trabajo De Fin De Grado/tfgReact/frontend/src/components/adds/AddDisease.jsx"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { useHistory, useParams } from 'react-router-dom';\r\nimport DiseaseService from '../../services/DiseaseService'\r\n\r\n// Componente que permite añadir enfermedades a un paciente\r\nconst AddDisease = () => {\r\n    const history = useHistory(); // Hook para la navegación de la página\r\n    const params = useParams(); // Hook para obtener los parámetros de la URL\r\n    const idDoctor = localStorage.getItem('token'); // ID del doctor autenticado\r\n\r\n    // Aqui se empiezan a definir las variables de estado\r\n    const [idPatient] = useState(params.id); // ID del paciente actual\r\n    const [diseases, setDiseases] = useState([]); // Lista de enfermedades disponibles\r\n\r\n    // Aqui se empiezan a definir las funciones del componente\r\n\r\n    // Esta función añade una enfermedad a un paciente y redirige al usuario a la página de visualización del paciente correspondiente.\r\n    const addDiseaseToPatient = (idDisease, diseaseName) => {\r\n        let diseasePatient = { idDisease: idDisease, idPatient: idPatient, diseaseName: diseaseName };\r\n        DiseaseService.addDiseaseToPatient(diseasePatient).then(() => { //Hacer\r\n        });\r\n        history.push({\r\n            pathname: `/view-patient/${idDoctor}/${idPatient}`,\r\n            search: 'true'\r\n        });\r\n    }\r\n\r\n    // Este hook de efecto se ejecuta cuando el componente se monta, actualiza o desmonta.\r\n    useEffect(() => {\r\n        // Se define una función que se ejecuta cuando el usuario utiliza el botón atrás en su navegador\r\n        window.onpopstate = () => {\r\n            history.push(`/view-patient/${idDoctor}/${idPatient}`);\r\n        }\r\n        // Se obtiene la lista de enfermedades disponibles del paciente actual y se almacena en la variable de estado 'diseases'\r\n        DiseaseService.getRestDiseasesPatient(idPatient).then((res) => {\r\n            setDiseases(res.data);\r\n        });\r\n    }, [history, idDoctor, idPatient]);\r\n\r\n    // Renderiza la lista de enfermedades disponibles y un botón para añadir cada una a la lista del paciente\r\n    return (\r\n        <div>\r\n            <h2 className=\"text-center\">Lista de Enfermedades</h2>\r\n            <div className=\"row\">\r\n                <table className=\"table table-striped table-bordered\">\r\n                    <thead>\r\n                        <tr>\r\n                            <th>Nombre</th>\r\n                        </tr>\r\n                    </thead>\r\n                    <tbody>\r\n                        {\r\n                            diseases.map(\r\n                                disease =>\r\n                                    <tr key={disease.idDisease}>\r\n                                        <td>{disease.diseaseName}</td>\r\n                                        <td>{disease.diseaseDescription}</td>\r\n                                        <td>\r\n                                            <button style={{ marginLeft: \"10px\" }} onClick={() => addDiseaseToPatient(disease.idDisease, disease.diseaseName)} className=\"btn btn-danger\">Añadir</button>\r\n                                        </td>\r\n                                    </tr>\r\n                            )\r\n                        }\r\n                    </tbody>\r\n                </table>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n// Exporta el componente utilizando React.memo para evitar la renderización innecesaria\r\nexport default  React.memo(AddDisease);"],"mappings":"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"},"metadata":{},"sourceType":"module"}